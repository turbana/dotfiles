#+TITLE: Emacs Config
#+STARTUP: content
#+PROPERTY: header-args :tangle yes

* Initial
** Lexical binding
All right-thinking people use lexical binding.

#+BEGIN_SRC emacs-lisp
  ;; -*- lexical-binding: t -*-
#+END_SRC

** themian
Load my custom theme early so if we have errors emacs still looks pretty.

#+BEGIN_SRC emacs-lisp
  (use-package themian-theme
    :load-path "/home/ian/.etc/spacemacs/private-layers/ian/local/themian-theme/"
    :straight '(:type built-in)
    :config
    (load-theme 'themian-dark t))
#+END_SRC

** Disable cruft
Turn off some default emacs settings I don't like, such as the menu bar, scroll
bar, etc.

#+BEGIN_SRC emacs-lisp
  ;; disable some unwanted UI modes
  (tool-bar-mode -1)
  (menu-bar-mode -1)
  (scroll-bar-mode -1)

  ;; don't show the initial emacs screen
  (setq inhibit-startup-screen t)
  ;; start in the *Messages* buffer
  (setq initial-buffer-choice (lambda () (get-buffer "*Messages*")))
  ;; let me use y/n in prompts
  (fset 'yes-or-no-p 'y-or-n-p)
#+END_SRC

** Secrets
I keep certain information out of source control: email addresses, account
information, etc. I have a small python program called =secret= that I use to
retrieve these secrets, let's expose that to emacs.

#+BEGIN_SRC emacs-lisp
  (setq ic/secret-cmd "secret")

  (defun ic/get-secret (secret)
    "Retrieve `secret' using the `ic/secret-cmd' program."
    (first (process-lines ic/secret-cmd secret)))
#+END_SRC

** Debugging
*** Tracing
Some functions to trace the changing of variables.

#+BEGIN_SRC emacs-lisp
  ;; use when live editing
  ;; (setq lexical-binding t)

  (defvar ic/watch-variable-message-fmt "%s(%s): %s %S"
    "Format to use when displaying variable changes. Equivalent to
  `(format ic/watch-variable-message-fmt symbol buffer operation value)'.")

  (defun ic/watch-variable (symbol &rest ops)
    "Watch for any OPS operations on SYMBOL and call `message'. OPS defaults to
  '(set), see `add-variable-watcher' for all possible values."
    (defun watch-variable-call-message (symbol value operation buffer)
      (message (ic//watch-variable-format symbol buffer operation value))
    (ic/watch-variable-call-func symbol #'watch-variable-call-message ops)))

  (defun ic/watch-variable-raise-debug (symbol &rest ops)
    "Watch for any changes to SYMBOL and raise on error."
    (defun watch-variable-raise-debug (symbol value operation buffer)
      (let ((msg (ic//watch-variable-format symbol buffer operation value)))
        (message msg)
        (debug nil msg)))
    (ic/watch-variable-call-func symbol #'watch-variable-raise-debug ops))

  (defun ic/watch-variable-print-stack (symbol &rest ops)
    "Watch for any changes to SYMBOL and print a stack trace."
    (defun watch-variable-print-stack (symbol value operation buffer)
      (message (ic//watch-variable-format symbol buffer operation value))
      (if-let ((stack-trace (with-output-to-string (backtrace))))
          (progn
            (message ">>>>>>>>>>")
            (message "%S" stack-trace)
            (message "<<<<<<<<<<"))
        (message "(no stack trace found)")))
    (ic/watch-variable-call-func symbol #'watch-variable-print-stack ops))

  (defvar ic//variable-watchers nil "a-list of variable watchers")

  (defun ic/watch-variable-call-func (symbol func &rest ops)
    "Watch for any OPS on SYMBOL and call FUNC."
    (unless (assq symbol ic//variable-watchers)
      (when (equal ops (list nil))
        (setq ops '(set let unlet makunbound defvaralias)))
      (defun watch-change (symbol value operation buffer)
        (when (member operation ops)
          (apply func (list symbol value operation buffer))))
      (add-variable-watcher symbol #'watch-change)
      (push (cons symbol #'watch-change) ic//variable-watchers)))

  (defun ic/unwatch-variable (symbol)
    "Remove any `ic/watch-variable-*' watchers from SYMBOL."
    (let ((watcher (alist-get symbol ic//variable-watchers)))
      (when watcher
        (remove-variable-watcher symbol watcher)
        (setq ic//variable-watchers
              (assq-delete-all symbol ic//variable-watchers))
        t)))

  (defun ic//watch-variable-format (symbol value operation buffer)
    "Generate printable string."
    (format "%s(%s): %s %S" symbol buffer operation value))
#+END_SRC

*** TODO Profiling
Some profiler keybindings.

#+BEGIN_SRC emacs-lisp
  (defun ic/start-cpu-profiler ()
    "Start the CPU profiler."
    (interactive)
    (profiler-start 'cpu))

  (defun ic/start-mem-profiler ()
    "Start the memory profiler."
    (interactive)
    (profiler-start 'mem))
#+END_SRC

** Functional
Let's have some functional functions.

#+BEGIN_SRC emacs-lisp
  (defun any (seq)
    (reduce (lambda (x y) (or x y))
            seq
            :initial-value nil))

  (defun all (seq)
    ;; NOTE: we need to guard against an empty list as `(reduce :initial-value t)'
    ;; will return `t' when given an empty list.
    (when seq
      (reduce (lambda (x y) (and x y))
              seq)))
#+END_SRC

*** TODO Tests
#+BEGIN_SRC emacs-lisp :tangle no
  (ert-deftest ic-test-any ()
    (should (eql (any '()) nil))
    (should (eql (any '(t)) t))
    (should (eql (any '(nil)) nil))
    (should (eql (any '(nil t)) t))
    (should (eql (any '(t t)) t)))

  (ert-deftest ic-test-all ()
    (should (eql (all '()) nil))
    (should (eql (all '(t)) t))
    (should (eql (all '(nil)) nil))
    (should (eql (all '(nil t)) nil))
    (should (eql (all '(t t)) t)))
#+END_SRC

* Packages
** bind-map

#+BEGIN_SRC emacs-lisp
  (use-package bind-map
      ;; :ensure t
      :after (evil)
      :config
      (bind-map ic-default-map
          :prefix-cmd ic-cmds
          :keys (ic-emacs-leader-key)
          :evil-keys (ic-leader-key)
          :override-minor-modes t
          :override-mode-name ic-leader-override-mode)
  )
#+END_SRC

** evil
*** use-package
#+BEGIN_SRC emacs-lisp :noweb yes
  (use-package evil
      :ensure evil
      :init
      <<evil-init>>
      :config
      <<evil-config>>
      )
#+END_SRC

*** Init
:PROPERTIES:
:header-args: :noweb-ref evil-init
:END:

#+BEGIN_SRC emacs-lisp
  (defvar ic-leader-key "SPC"
    "The leader key.")

  (defvar ic-emacs-leader-key "M-m"
    "The leader key accessible in `emacs state' and `insert state'")

  (defvar ic-major-mode-leader-key ","
    "Major mode leader key is a shortcut key which is the equivalent of
    pressing `<leader> m`. Set it to `nil` to disable it.")

  (defvar ic-major-mode-emacs-leader-key "C-M-m"
    "Major mode leader key accessible in `emacs state' and `insert state'")

  (defvar ic/prefix-titles nil
    "alist for mapping command prefixes to long names.")

  (defvar ic-default-map (make-sparse-keymap)
    "Base keymap for all ic leader key commands.")
#+END_SRC

*** Config
:PROPERTIES:
:header-args: :noweb-ref evil-config
:END:

#+BEGIN_SRC emacs-lisp
  (evil-mode 1)
#+END_SRC

**** Leader keys
The following is shamelessly stolen from =spacemac's= =core-keybinding.el=. I've
modified it to fit my naming conventions.

#+BEGIN_SRC emacs-lisp
  (defun ic/declare-prefix (prefix name &optional long-name)
    "Declare a prefix PREFIX. PREFIX is a string describing a key
  sequence. NAME is a string used as the prefix command.
  LONG-NAME if given is stored in `ic/prefix-titles'."
    (let* ((command name)
           (full-prefix (concat ic-leader-key " " prefix))
           (full-prefix-emacs (concat ic-emacs-leader-key " " prefix))
           (full-prefix-lst (listify-key-sequence (kbd full-prefix)))
           (full-prefix-emacs-lst (listify-key-sequence
                                   (kbd full-prefix-emacs))))
      ;; define the prefix command only if it does not already exist
      (unless long-name (setq long-name name))
      (which-key-declare-prefixes
        full-prefix-emacs (cons name long-name)
        full-prefix (cons name long-name))))
  (put 'ic/declare-prefix 'lisp-indent-function 'defun)

  (defun ic/declare-prefix-for-mode (mode prefix name &optional long-name)
    "Declare a prefix PREFIX. MODE is the mode in which this prefix command should
  be added. PREFIX is a string describing a key sequence. NAME is a symbol name
  used as the prefix command."
    (let  ((command (intern (concat (symbol-name mode) name)))
           (full-prefix (concat ic-leader-key " " prefix))
           (full-prefix-emacs (concat ic-emacs-leader-key " " prefix))
           (is-major-mode-prefix (string-prefix-p "m" prefix))
           (major-mode-prefix (concat ic-major-mode-leader-key
                                      " " (substring prefix 1)))
           (major-mode-prefix-emacs
            (concat ic-major-mode-emacs-leader-key
                    " " (substring prefix 1))))
      (unless long-name (setq long-name name))
      (let ((prefix-name (cons name long-name)))
        (which-key-declare-prefixes-for-mode mode
          full-prefix-emacs prefix-name
          full-prefix prefix-name)
        (when (and is-major-mode-prefix ic-major-mode-leader-key)
          (which-key-declare-prefixes-for-mode mode major-mode-prefix prefix-name))
        (when (and is-major-mode-prefix ic-major-mode-emacs-leader-key)
          (which-key-declare-prefixes-for-mode
            mode major-mode-prefix-emacs prefix-name)))))
  (put 'ic/declare-prefix-for-mode 'lisp-indent-function 'defun)

  (defun ic/set-leader-keys (key def &rest bindings)
    "Add KEY and DEF as key bindings under
  `ic-leader-key' and `ic-emacs-leader-key'.
  KEY should be a string suitable for passing to `kbd', and it
  should not include the leaders. DEF is most likely a quoted
  command. See `define-key' for more information about the possible
  choices for DEF. This function simply uses `define-key' to add
  the bindings.

  For convenience, this function will accept additional KEY DEF
  pairs. For example,

  \(ic/set-leader-keys
     \"a\" 'command1
     \"C-c\" 'command2
     \"bb\" 'command3\)"
    (while key
      (define-key ic-default-map (kbd key) def)
      (setq key (pop bindings) def (pop bindings))))
  (put 'ic/set-leader-keys 'lisp-indent-function 'defun)

  (defalias 'evil-leader/set-key 'ic/set-leader-keys)

  (defun ic//acceptable-leader-p (key)
    "Return t if key is a string and non-empty."
    (and (stringp key) (not (string= key ""))))

  (defun ic//init-leader-mode-map (mode map &optional minor)
    "Check for MAP-prefix. If it doesn't exist yet, use `bind-map'
  to create it and bind it to `ic-major-mode-leader-key'
  and `ic-major-mode-emacs-leader-key'. If MODE is a
  minor-mode, the third argument should be non nil."
    (let* ((prefix (intern (format "%s-prefix" map)))
           (leader1 (when (ic//acceptable-leader-p
                           ic-major-mode-leader-key)
                      ic-major-mode-leader-key))
           (leader2 (when (ic//acceptable-leader-p
                           ic-leader-key)
                      (concat ic-leader-key " m")))
           (emacs-leader1 (when (ic//acceptable-leader-p
                                 ic-major-mode-emacs-leader-key)
                            ic-major-mode-emacs-leader-key))
           (emacs-leader2 (when (ic//acceptable-leader-p
                                 ic-emacs-leader-key)
                            (concat ic-emacs-leader-key " m")))
           (leaders (delq nil (list leader1 leader2)))
           (emacs-leaders (delq nil (list emacs-leader1 emacs-leader2))))
      (or (boundp prefix)
          (progn
            (eval
             `(bind-map ,map
                :prefix-cmd ,prefix
                ,(if minor :minor-modes :major-modes) (,mode)
                :keys ,emacs-leaders
                :evil-keys ,leaders
                :evil-states (normal motion visual evilified)))
            (boundp prefix)))))

  (defun ic/set-leader-keys-for-major-mode (mode key def &rest bindings)
    "Add KEY and DEF as key bindings under
  `ic-major-mode-leader-key' and
  `ic-major-mode-emacs-leader-key' for the major-mode
  MODE. MODE should be a quoted symbol corresponding to a valid
  major mode. The rest of the arguments are treated exactly like
  they are in `ic/set-leader-keys'."
    (let* ((map (intern (format "ic-%s-map" mode))))
      (when (ic//init-leader-mode-map mode map)
        (while key
          (define-key (symbol-value map) (kbd key) def)
          (setq key (pop bindings) def (pop bindings))))))
  (put 'ic/set-leader-keys-for-major-mode 'lisp-indent-function 'defun)

  (defalias
    'evil-leader/set-key-for-mode
    'ic/set-leader-keys-for-major-mode)

  (defun ic/set-leader-keys-for-minor-mode (mode key def &rest bindings)
    "Add KEY and DEF as key bindings under
  `ic-major-mode-leader-key' and
  `ic-major-mode-emacs-leader-key' for the minor-mode
  MODE. MODE should be a quoted symbol corresponding to a valid
  minor mode. The rest of the arguments are treated exactly like
  they are in `ic/set-leader-keys'."
    (let* ((map (intern (format "ic-%s-map" mode))))
      (when (ic//init-leader-mode-map mode map t)
        (while key
          (define-key (symbol-value map) (kbd key) def)
          (setq key (pop bindings) def (pop bindings))))))
  (put 'ic/set-leader-keys-for-minor-mode 'lisp-indent-function 'defun)
#+END_SRC

** helm
#+BEGIN_SRC emacs-lisp
  (use-package helm
      :ensure t
      ;; some temp key bindings
      :bind (("M-x" . helm-M-x)
             ("C-x C-f" . helm-find-files)
             ("C-x f" . helm-recentf)
             ("C-x b" . helm-buffers-list))
      :bind (:map helm-map
                  ("C-w" . backward-kill-word))
      :config
      (helm-mode 1))
#+END_SRC

** org
=org-mode= is a large part of my daily emacs usage so it takes a large amount of
my configuration as well. Let's go.

*** use-package
#+BEGIN_SRC emacs-lisp :tangle no
(use-package org
      :mode (("\\.org$" . org-mode))
      :ensure org-plus-contrib
      :init
      <<org-init>
      :config
      <<org-config>>
      )
#+END_SRC

*** Init
:PROPERTIES:
:header-args: :noweb-ref org-init
:END:

*** Config
:PROPERTIES:
:header-args: :noweb-ref org-config
:END:

** variable-pitch
=org-mode= should be mostly variable pitch with only code and =company-mode= being
fixed width.

#+BEGIN_SRC emacs-lisp
  (defvar ic/org-faces-fixed-pitch
    '(company-echo
      company-echo-common
      company-preview
      ;; keep this variable pitched as it's used on the same line as the input
      ;; text (which is variable).
      ;; company-preview-common
      company-preview-search
      company-scrollbar-bg
      company-scrollbar-fg
      company-template-field
      company-tooltip
      company-tooltip-annotation
      company-tooltip-annotation-selection
      company-tooltip-common
      company-tooltip-common-selection
      company-tooltip-mouse
      company-tooltip-search
      company-tooltip-search-selection
      company-tooltip-selection
      linum
      org-block
      org-block-begin-line
      org-block-end-line
      org-checkbox
      org-code
      org-date
      org-document-info-keyword
      org-hide
      org-indent
      org-link
      org-meta-line
      org-special-keyword
      org-table
      whitespace-space
      )
    "A list of faces that should remain fixed width when enabling `variable-pitch-mode'.")

  (defun ic//variable-pitch-add-inherit (attrs parent)
    "Add `:inherit PARENT' to ATTRS unless already present. Handles cases where :inherit is already specified."
    (let ((current-parent (plist-get attrs :inherit)))
      (unless (or (eq parent current-parent)
                  (and (listp current-parent) (member parent current-parent)))
        (plist-put attrs :inherit (if current-parent
                                      (list current-parent parent)
                                    parent)))))

  (defun ic/variable-pitch-mode ()
    (variable-pitch-mode 1)
    (mapc
     (lambda (face)
       (when (facep face)
         (apply 'set-face-attribute
                face nil (ic//variable-pitch-add-inherit
                          (face-attr-construct face)
                          'fixed-pitch))))
     ic/org-faces-fixed-pitch))

  (add-hook 'org-mode-hook #'ic/variable-pitch-mode)
#+END_SRC

** which-key
#+BEGIN_SRC emacs-lisp
  (use-package which-key
      :config
    (which-key-mode 1))
#+END_SRC

* Misc
** Customize
I don't like =customize= so discard all settings.

#+BEGIN_SRC emacs-lisp
  (setq custom-file (concat (temporary-file-directory) "emacs-customize-settings"))
#+END_SRC

** Font setup
Setup both monospaced and non-monospaced fonts.

Some good variable spaced fonts:
- Century Schoolbook L
- TeX Gyre Pagella
- Utopia
- Caladea
- Gentium
- Gillius ADF
- URW Palladio L

#+BEGIN_SRC emacs-lisp
  (defvar ic/fixed-pitch-font '("DejaVu Sans Mono" 11.0))
  (defvar ic/variable-pitch-font '("Gillius ADF" 13.0))

  (use-package cl)

  (defun ic/setup-fonts (fixed-pitch-font variable-pitch-font)
    (cl-flet ((make-size (size)
                (truncate (* 10 size))))
      (let ((fixed-family (first fixed-pitch-font))
            (fixed-height (make-size (second fixed-pitch-font)))
            (variable-family (first variable-pitch-font))
            (variable-height (make-size (second variable-pitch-font))))
        (custom-theme-set-faces
         'user
         `(default ((t (:family ,fixed-family :height ,fixed-height))))
         `(fixed-pitch ((t (:family ,fixed-family :height ,fixed-height))))
         `(variable-pitch ((t (:family ,variable-family :height ,variable-height))))))))
  (ic/setup-fonts ic/fixed-pitch-font ic/variable-pitch-font)
#+END_SRC

** TODO Refile
#+BEGIN_SRC emacs-lisp
  ;; I want a static cursor
  (blink-cursor-mode -1)
#+END_SRC

* Keybindings

** f :: Files
#+BEGIN_SRC emacs-lisp
  (ic/declare-prefix "f" "files")
  (ic/set-leader-keys "ff" 'helm-find-files)
  (ic/set-leader-keys "fr" 'helm-recentf)
#+END_SRC

** E :: Emacs

#+BEGIN_SRC emacs-lisp
  (ic/declare-prefix "E" "emacs")
#+END_SRC

Profiler bindings.
#+BEGIN_SRC emacs-lisp
  (ic/declare-prefix "Ep" "emacs profiler")

  (ic/set-leader-keys "Epc" #'ic/start-cpu-profiler)
  (ic/set-leader-keys "Epm" #'ic/start-mem-profiler)
  (ic/set-leader-keys "Eps" #'profiler-stop)
  (ic/set-leader-keys "Epr" #'profiler-report)
#+END_SRC
