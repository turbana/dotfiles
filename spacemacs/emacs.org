#+TITLE: Spacemacs Config
#+STARTUP: content

* Major Packages
** org-mode
*** Basic Setup
#+BEGIN_SRC emacs-lisp :tangle yes
  (setq org-agenda-files '("~/org" "~/org/home"))
  (setq org-default-notes-file "~/org/refile.org")
  (setq org-archive-location "%s_archive::")
#+END_SRC
*** Refile
#+BEGIN_SRC emacs-lisp :tangle yes
  (setq org-refile-targets
        '((nil :maxlevel . 6)
          (org-agenda-files :maxlevel . 1)))
  (setq org-refile-use-outline-path 'file)
  (setq org-outline-path-complete-in-steps nil)
#+END_SRC
*** Keybinds
**** Agenda
#+BEGIN_SRC emacs-lisp :tangle yes
  (global-set-key (kbd "M-<f1>") 'org-clock-goto)
  (global-set-key (kbd "<f12>") 'org-agenda)
#+END_SRC
**** Refile jump
Add ability to jump to any org heading with SPC-aoj
#+BEGIN_SRC emacs-lisp :tangle yes
  (defun ic/org-refile ()
    "call C-u `org-refile'"
    (interactive)
    (setq current-prefix-arg '(1))
    (call-interactively 'org-refile))
  (spacemacs/set-leader-keys "aoj" 'ic/org-refile)
#+END_SRC
**** Normal mode navigation
#+BEGIN_SRC emacs-lisp :tangle yes
  (evil-define-key 'normal org-mode-map (kbd "<left>") 'outline-up-heading)
  (evil-define-key 'normal org-mode-map (kbd "<up>") 'org-backward-heading-same-level)
  (evil-define-key 'normal org-mode-map (kbd "<down>") 'org-forward-heading-same-level)
  (evil-define-key 'normal org-mode-map (kbd "<right>") 'outline-next-visible-heading)

  (evil-define-key 'normal org-mode-map (kbd "S-<left>") 'org-promote-subtree)
  (evil-define-key 'normal org-mode-map (kbd "S-<up>") 'org-move-subtree-up)
  (evil-define-key 'normal org-mode-map (kbd "S-<down>") 'org-move-subtree-down)
  (evil-define-key 'normal org-mode-map (kbd "S-<right>") 'org-demote-subtree)

  (evil-define-key 'normal org-mode-map (kbd "C-S-<left>") 'org-do-promote)
  (evil-define-key 'normal org-mode-map (kbd "C-S-<right>") 'org-do-demote)
#+END_SRC
*** Appearance
Basic heading setup
#+BEGIN_SRC emacs-lisp :tangle yes
  (setq org-startup-indented t)
  (setq org-startup-folded nil)
  (setq org-hide-leading-stars t)
  (setq org-odd-levels-only nil)

  (setq org-adapt-indentation t)
  (setq org-indent-indentation-per-level 2)

  (setq org-fontify-whole-heading-line t)
  (setq org-fontify-done-headline nil)
  (setq org-fontify-quote-and-verse-blocks t)
#+END_SRC

Use =visual-line-mode= as =org-mode= is mostly prose.
#+BEGIN_SRC emacs-lisp :tangle yes
  (add-hook 'org-mode-hook #'visual-line-mode)
#+END_SRC

Change some characters to unicode icons
#+BEGIN_SRC emacs-lisp :tangle yes
  ;; ⟡⚫•¤⦾⦿☙❥❧‣—⁓
  (setq org-bullets-bullet-list '("⚫"))
  ;; (setq org-bullets-bullet-list '("⚫"))
  ;; (setq org-bullets-bullet-list '("*"))
  (setq org-ellipsis " ⬎")
  (setq ic/org-list-icon "—")
  (font-lock-add-keywords
   'org-mode
   '(("^ *\\([-]\\) "
      (0 (prog1 ()
           (compose-region (match-beginning 1)
                           (match-end 1)
                           ic/org-list-icon))))))
#+END_SRC

XXX what do these do?
#+BEGIN_SRC emacs-lisp :tangle yes
(setq org-completion-use-ido t)
(setq org-return-follows-link t)
;; (setq org-blank-before-new-entry nil)
#+END_SRC

Use current window to edit =org-src= blocks. Don't indent.
#+BEGIN_SRC emacs-lisp :tangle yes
  (setq org-src-preserve-indentation nil)
  (setq org-edit-src-content-indentation 2)
  (setq org-src-window-setup 'current-window)
#+END_SRC

Hide emphasis markers such as *bold*, /italic/, etc.
#+BEGIN_SRC emacs-lisp :tangle yes
(setq org-hide-emphasis-markers t)
#+END_SRC
*** Agenda
#+BEGIN_SRC emacs-lisp :tangle yes
  ;; don't show completed DEADLINE and SCHEDULED in agenda
  (setq org-agenda-skip-scheduled-if-done t)
  (setq org-agenda-skip-deadline-if-done t)
  (setq org-agenda-skip-deadline-prewarning-if-scheduled 't)
  ;; first day in agenda should be today
  (setq org-agenda-start-on-weekday nil)
  ;; show weekly agenda by default
  (setq org-agenda-span 'week)
  ;; custom agenda views
  (setq org-agenda-custom-commands
        '(("a" "Agenda"
           ((agenda "" nil)
            (tags "refile"
                  ((org-agenda-overriding-header "Refile tasks:")
                   (org-tags-match-list-sublevels nil)))
            (tags "-refile/"
                    ((org-agenda-overriding-header "Archive tasks:")
                     (org-agenda-skip-function 'bh/skip-non-archivable-tasks)
                     (org-tags-match-list-sublevels nil))))
           nil)
          ))
  ;; don't have a separator between agenda sections
  (setq org-agenda-block-separator nil)
*** Habits
#+BEGIN_SRC emacs-lisp :tangle yes
  (setq org-habit-preceding-days 7)
  (setq org-habit-following-days 1)
  (setq org-habit-graph-column 2)
  (setq org-habit-show-habits-only-for-today t)
  (setq org-habit-show-all-today t)
#+END_SRC
*** Todo
#+BEGIN_SRC emacs-lisp :tangle yes
  (setq org-todo-keywords
  '((sequence "TODO(t)" "NEXT(n)" "|" "DONE(d!)")
    (sequence "WAIT(a@/!)" "HOLD(h@/!)" "|"
              "CANCELLED(c@/!)" "PHONE" "MEETING" "HABIT(a)")))
  (setq org-enforce-todo-dependencies t)
  (setq org-enforce-todo-checkbox-dependencies t)
#+END_SRC
*** Logging
#+BEGIN_SRC emacs-lisp :tangle yes
  ;; log status changes
  (setq org-log-done 'time)
  (setq org-log-redeadline 'time)
  (setq org-log-reschedule 'time)
  (setq org-log-into-drawer "LOGBOOK")
#+END_SRC
*** Capture
**** Templates
#+BEGIN_SRC emacs-lisp :tangle yes
  (setq org-reverse-note-order nil)
  (setq org-capture-templates
        '(("t" "todo" entry (file org-default-notes-file)
           "* TODO %?\n%u\n"
           :clock-in t :clock-resume t)
          ("r" "respond" entry (file org-default-notes-file)
           "* TODO respond to %:from on %:subject\nscheduled: %t\n%u\n%a\n"
           :clock-in t :clock-resume t :immediate-finish t)
          ("n" "note" entry (file org-default-notes-file)
           "* %? :note:\n%u\n"
           :clock-in t :clock-resume t)
          ("m" "meeting" entry (file org-default-notes-file)
           "* MEETING with %? :meeting:\n%u"
           :clock-in t :clock-resume t)
          ("p" "phone call" entry (file org-default-notes-file)
           "* PHONE %? :phone:\n%u"
           :clock-in t :clock-resume t)
          ("H" "habit" entry (file org-default-notes-file)
           "* TODO %?\n%u\nscheduled: %(format-time-string \"<%y-%m-%d %a .+1d/3d>\")\n:properties:\n:style: habit\n:repeat_to_state: next\n:end:\n")
          ("R" "recipe" entry (file org-default-notes-file)
           "* %^{name} :uncooked::\n:properties:\n:source: %^{source}\n:image: %^{image}\n:serving: %^{serving}\n:type: %^{type}\n:end:\n** ingredients\n   | %? | |\n** procedure\n   1.\n** log")
          ("J" "job" entry (file org-default-notes-file)
           "* %^{company} - %^{title} :toapply:\n%U\n[[%^{url}][Submission]]\n%?\n** Description\n%^{description}\n** Contact Info\n** Log\n")
          ))
  (add-hook 'org-capture-mode-hook 'evil-insert-state)
#+END_SRC

**** Full Frame
The standard =org-capture= behavior is to split the window before capturing a
task. When this is started from outside emacs a random buffer occupies half the
frame. What I want is the capture buffer to take the full frame when starting
the capture from outside emacs. My window manager will start the capture task
with a frame name of =OrgCapture=. Because =org-capture= doesn't provide a hook
where it splits the frame we'll need to advise it to ~(delete-other-windows)~
when our frame is =OrgCapture= and one of the following:

1. When choosing the capture template (buffer name: =*Org Select*=)
2. When inside the capture task (buffer name: =CAPTURE-<filename>=)

Finally, call ~(delete-frame)~ after the capture is finalized.

#+BEGIN_SRC emacs-lisp :tangle yes
  (defun ic/maybe-org-capture-delete-other-windows (buf)
    "Maximize frame when starting an external org-capture"
    (let* ((buffer-name (if (bufferp buf) (buffer-name buf) buf))
           (is-capture-frame (equal "OrgCapture" (frame-parameter nil 'name)))
           (is-capture-buffer (or (equal "*Org Select*" buffer-name)
                                  (string-match "^CAPTURE-" buffer-name))))
      (when (and is-capture-frame is-capture-buffer)
        (delete-other-windows))))
  (advice-add 'org-switch-to-buffer-other-window :after #'ic/maybe-org-capture-delete-other-windows)

  (defun ic/maybe-org-capture-delete-frame ()
    "Close the frame when finalizing an external org-capture"
    (when (equal "OrgCapture" (frame-parameter nil 'name))
      (delete-frame)))
  (add-hook 'org-capture-after-finalize-hook #'ic/maybe-org-capture-delete-frame)
#+END_SRC
*** Clocking (disabled)
#+BEGIN_SRC emacs-lisp :tangle no
  ;; resolve open clocks for any amount of time
  (setq org-clock-idle-time nil)
  ;; start new clocking immediatly after clocking out
  (setq org-clock-continuously t)
  ;; save current clock when emacs exits
  (setq org-clock-persist t)
  ;; change to NEXT state when starting a clock
  (setq org-clock-in-switch-to-state "NEXT")
  ;; change to TODO state when leaving a clock
  (setq org-clock-out-switch-to-state "TODO")
  ;; continue an open clock when checking into task
  (setq org-clock-in-resume t)
  ;; include current clock in reports
  (setq org-clock-report-include-clocking-task t)
  ;; save all clocks in the LOGBOOK drawer
  (setq org-clock-into-drawer "LOGBOOK")
  ;; show current clock in the modeline
  (setq spacemacs-mode-line-org-clock-current-taskp t)
  ;; only show today's clock in the modeline
  (setq org-clock-mode-line-total 'today)
  (org-clock-persistence-insinuate)
#+END_SRC
*** Misc
#+BEGIN_SRC emacs-lisp :tangle yes
  ;; don't modify the task state when archiving
  (setq org-archive-mark-done nil)
  (add-to-list 'org-structure-template-alist
               '("e" "#+BEGIN_SRC emacs-lisp :tangle yes\n?\n#+END_SRC")
               '("y" "#+BEGIN_SRC yaml :tangle yes\n?\n#+END_SRC")
               )
  ;; catch modifying collapsed text
  (setq org-catch-invisible-edits 'error)
#+END_SRC
*** Exporting
#+BEGIN_SRC emacs-lisp :tangle yes
  (setq org-publish-project-alist
        '(("recipes"
           :base-directory "~/org/home/food/"
           :base-extension "org"
           :publishing-directory "~/food/"
           :recursive t
           :publishing-function org-html-publish-to-html
           :headline-levels 4
           :auto-preamble t
           )))
  (add-hook 'org-export-before-parsing-hook 'ic/org-export-filter-recipes)
#+END_SRC
*** TODO Functions
Need to clean these up
#+BEGIN_SRC emacs-lisp :tangle yes
  ;;; functions taken from http://doc.norang.ca/org-mode.html

  (defun bh/skip-non-archivable-tasks ()
    "Skip trees that are not available for archiving"
    (save-restriction
      (widen)
      ;; Consider only tasks with done todo headings as archivable candidates
      (let ((next-headline (save-excursion (or (outline-next-heading) (point-max))))
            (subtree-end (save-excursion (org-end-of-subtree t))))
        (if (member (org-get-todo-state) org-todo-keywords-1)
            (if (member (org-get-todo-state) org-done-keywords)
                (let* ((daynr (string-to-number (format-time-string "%d" (current-time))))
                       (a-month-ago (* 60 60 24 (+ daynr 1)))
                       (last-month (format-time-string "%Y-%m-" (time-subtract (current-time) (seconds-to-time a-month-ago))))
                       (this-month (format-time-string "%Y-%m-" (current-time)))
                       (subtree-is-current (save-excursion
                                             (forward-line 1)
                                             (and (< (point) subtree-end)
                                                  (re-search-forward (concat last-month "\\|" this-month) subtree-end t)))))
                  (if subtree-is-current
                      subtree-end ; Has a date in this month or last month, skip it
                    nil))  ; available to archive
              (or subtree-end (point-max)))
          next-headline))))


  (defun ic/org-recipe-publish-to-html (plist org-filename target-dir)
    "Export ORG-FILENAME as html. Similar to `org-html-publish-to-html', but only exporting certain sections"
    (interactive)
    (let* ((base-name (file-name-sans-extension (file-name-nondirectory org-filename)))
           (target-filename (concat target-dir base-name ".html")))
      (with-temp-file target-filename
        (insert-file-contents org-filename)
        (goto-char (point-min))
        )
      )
    )


  (defun ic/org-export-filter-recipes (backend)
    "Filter out unwanted elements from org-mode recipes, but only when export as HTML."
    (when (equal backend 'html)
      (org-map-entries
       (lambda ()
         )
       ;; (lambda () (delete-region (point) (progn (forward-line) (point)))))
      )
    ))
#+END_SRC
** Helm
*** Keybinds
#+BEGIN_SRC emacs-lisp :tangle yes
(define-key helm-map (kbd "C-w") 'backward-kill-word)
#+END_SRC
* Programming
** General
*** Indentation
#+BEGIN_SRC emacs-lisp :tangle yes
  (defun ic/setup-indentation-hook (tab-width use-tabs)
    "Create a mode-hook that will setup indentation variables."
    `(lambda ()
       (setq indent-tabs-mode ,use-tabs)
       (setq tab-width ,tab-width)
       (setq js-indent-level ,tab-width)
       (setq python-indent ,tab-width)))
  (let ((indentation-setup
         '(
           (asm-mode-hook 8 t)
           (emacs-lisp-mode-hook 2 nil)
           (lisp-mode-hook 2 nil)
           (makefile-mode-hook 8 t)
           (python-mode-hook 4 nil)
           )))
    (dolist (elem indentation-setup)
      (add-hook (car elem)
                (apply #'ic/setup-indentation-hook (cdr elem)))))
  ;; use tabs by default
  (setq-default indent-tabs-mode t)
  (setq-default tab-width 4)
#+END_SRC
** Python
*** Linter
#+BEGIN_SRC emacs-lisp :tangle yes
  (setq flycheck-checker-error-threshold 1024)
#+END_SRC
** Lisp
*** Indentation
#+BEGIN_SRC emacs-lisp :tangle yes
  ;; better indentation of quoted lists
  (setq lisp-indent-function 'common-lisp-indent-function)
#+END_SRC
* Misc
** Color Themes
#+BEGIN_SRC emacs-lisp :tangle yes
  (load-theme 'themian-dark t)
#+END_SRC
** Fonts
Setup both monospaced and non-monospaced fonts.

Some good variable spaced fonts:
- Century Schoolbook L
- TeX Gyre Pagella
- Utopia

#+BEGIN_SRC emacs-lisp :tangle yes
  (custom-theme-set-faces
   'user
   '(variable-pitch ((t (:family "Century Schoolbook L" :height 120 :weight light))))
   '(fixed-pitch ((t (:family "DejaVu Sans Mono" :height 0.9166666)))))
#+END_SRC
** Variable pitch
=org-mode= should be mostly variable pitch with only code being fixed.
#+BEGIN_SRC emacs-lisp :tangle yes
  (setq ic/org-faces-fixed-pitch
        (list
         'linum
         'org-block
         'org-block-begin-line
         'org-block-end-line
         'org-checkbox
         'org-code
         'org-document-info-keyword
         'org-hide
         'org-indent
         'org-link
         'org-meta-line
         'org-special-keyword
         'org-table
         ))

  (defun ic/variable-pitch-mode ()
    (variable-pitch-mode 1)
    (mapc
     (lambda (face)
       (set-face-attribute face nil :inherit 'fixed-pitch))
     ic/org-faces-fixed-pitch)
    )
  (add-hook 'org-mode-hook #'ic/variable-pitch-mode)
#+END_SRC
** Browser
Use chromium as default browser
#+BEGIN_SRC emacs-lisp :tangle yes
  (setq browse-url-browser-function 'browse-url-generic
        browse-url-generic-program "chromium")
#+END_SRC
** Clipboard
Use system clipboard
#+BEGIN_SRC emacs-lisp :tangle yes
  (setq x-select-enable-primary t)
#+END_SRC
** Line Numbers
Use line numbers everywhere
#+BEGIN_SRC emacs-lisp :tangle yes
  (global-linum-mode)
#+END_SRC
** Text Wrap
#+BEGIN_SRC emacs-lisp :tangle yes
  (setq-default fill-column 80)
  (add-hook 'text-mode-hook 'turn-on-auto-fill)
#+END_SRC
** Fill Column
#+BEGIN_SRC emacs-lisp :tangle yes
  (turn-on-fci-mode)
#+END_SRC
** Search
Disable search highlighting
#+BEGIN_SRC emacs-lisp :tangle yes
  (global-evil-search-highlight-persist 0)
#+END_SRC
* Refile
#+BEGIN_SRC emacs-lisp :tangle yes
  (setq create-lockfiles nil)
  (setq magit-diff-refine-hunk 'all)
  (setq powerline-default-separator 'contour)
#+END_SRC
