* Setup
#+BEGIN_SRC emacs-lisp
(deftheme themian
  "My color theme")


(defmacro themian-with-color-variables (&rest body)
  "Bind all variables in `themian-colors-alist'.

Taken from zenburn-theme.el"
  (declare (indent 0))
  `(let ((class '((class color) (min-colors 89)))
         ,@(mapcar (lambda (color)
                     (list (nth 0 color) (nth 2 color)))
                   themian-colors-list))
     ,@body))
#+END_SRC
* Colors
#+BEGIN_SRC emacs-lisp
(setq themian-colors-list
      '((unknown  "#9933ff" "#9933ff")
        (diff-1   "#204040" "#66cccc")
        (diff-2   "#306060" "#6cd9d9")
        (diff-3   "#102020" "#59b2b2")
        (diff-4   "#183030" "#60bfbf")
        (grey-0   "#080808" "#f6f6f6")
        (grey-1   "#101010" "#f0f0f0")
        (grey-2   "#202020" "#d0d0d0")
        (grey-3   "#303030" "#c9c9c9")
        (grey-4   "#404040" "#c0c0c0")
        (grey-5   "#505050" "#b9b9b9")
        (grey-6   "#606060" "#b0b0b0")
        (white-1  "#ffffff" "#000000")
        (white-2  "#d8d8d8" "#202020")
        (white-3  "#b0b0b0" "#606060")
        (white-4  "#999999" "#999999")
        (green-1  "#8CDC8C" "#37571f")
        (green-2  "#50b060" "#3a5c2d")
        (green-3  "#00cd00" "#9933ff")
        (red-1    "#993333" "#9933ff")
        (red-2    "#cc6666" "#9933ff")
        (yellow-1 "#B1C739" "#a39b0d")
        (yellow-2 "#5D860C" "#9933ff")
        (yellow-3 "#FCF0A5" "#948600")
        (orange-1 "#FF936B" "#FF936B")
        (orange-2 "#ff8c00" "#9933ff")
        (blue-1   "#6490C5" "#263672")
        (blue-2   "#8DB2DE" "#5276a1")
        (blue-3   "#BFD6F2" "#395270")
        (blue-4   "#408080" "#9933ff")
        (cyan-1   "#77D5D5" "#307585")))
#+END_SRC
* Prologue
#+BEGIN_SRC emacs-lisp
  (themian-with-color-variables
	(setq
	 themian-faces-list
	 `( ;; Finished in Epilogue
#+END_SRC
* Theme
** Basic
#+BEGIN_SRC emacs-lisp
  (button (:foreground ,white-1 :background ,grey-3
                       :box (:line-width 1 :style released-button)))
  (cursor (:background ,cyan-1))
  (default (:foreground ,white-2 :background ,grey-1 :weight normal))
  (escape-glyph (:foreground ,white-2 :background ,grey-4 :weight bold))
  (font-lock-builtin-face (:foreground ,blue-3))
  (font-lock-comment-delimiter-face (:inherit font-lock-comment-face))
  (font-lock-comment-face (:foreground ,cyan-1 :slant italic))
  (font-lock-constant-face (:foreground ,green-1))
  (font-lock-doc-face (:foreground ,green-2))
  (font-lock-function-name-face (:foreground ,blue-1))
  (font-lock-keyword-face (:foreground ,yellow-1))
  (font-lock-negation-char-face (:inherit default))
  (font-lock-preprocessor-face (:foreground ,yellow-3))
  (font-lock-regexp-grouping-backslash (:background ,unknown))
  (font-lock-regexp-grouping-construct (:background ,unknown))
  (font-lock-string-face (:foreground ,white-3))
  (font-lock-type-face (:foreground ,green-1))
  (font-lock-variable-name-face (:foreground ,white-1))
  (font-lock-warning-face (:foreground ,white-1 :background ,red-1))
  (fringe (:foreground ,grey-5 :background ,grey-0))
  (header-line (:background ,grey-2))
  (highlight (:background ,grey-2))
  (lazy-highlight (:inherit normal))
  (link (:foreground ,yellow-1 :underline t))
  (link-visited (:background ,unknown))
  (linum
   (:foreground ,grey-6 :background ,grey-0 :weight normal :slant normal
				:underline nil))
  (minibuffer-prompt (:weight bold))
  (region (:background ,grey-3))
  (secondary-selection (:background ,grey-4))
  (shadow (:foreground ,blue-1))
  (tooltip (:background ,unknown))
  (trailing-whitespace (:background ,yellow-3))
  (warning (:foreground ,orange-2 :weight bold))
#+END_SRC
** Avy
#+BEGIN_SRC emacs-lisp
  (avy-background-face (:foreground ,white-3))
  (avy-goto-char-timer-face (:background ,unknown))
  (avy-lead-face (:foreground ,grey-2 :background ,green-1))
  (avy-lead-face-0 (:foreground ,white-1 :background ,blue-1))
  (avy-lead-face-1 (:background ,unknown))
  (avy-lead-face-2 (:foreground ,white-1 :background ,red-1))
#+END_SRC
** CSV
#+BEGIN_SRC emacs-lisp
  (csv-separator-face (:foreground ,white-4))
#+END_SRC
** Diff
#+BEGIN_SRC emacs-lisp
  (diff-header (:background ,unknown))
  (diff-refine-added (:box (:line-width -1 :color ,blue-2)))
  (diff-refine-changed (:background ,unknown))
  (diff-refine-removed (:inherit diff-refine-added))
#+END_SRC
** Ediff
#+BEGIN_SRC emacs-lisp
  (ediff-current-diff-A (:background ,diff-3))
  (ediff-current-diff-Ancestor (:inherit ediff-current-diff-A))
  (ediff-current-diff-B (:inherit ediff-current-diff-A))
  (ediff-current-diff-C (:inherit ediff-current-diff-A))
  (ediff-even-diff-A (:background ,grey-3))
  (ediff-even-diff-Ancestor (:inherit ediff-even-diff-A))
  (ediff-even-diff-B (:inherit ediff-even-diff-A))
  (ediff-even-diff-C (:inherit ediff-even-diff-A))
  (ediff-fine-diff-A (:foreground ,white-1 :background ,diff-1))
  (ediff-fine-diff-Ancestor (:inherit ediff-fine-diff-A))
  (ediff-fine-diff-B (:inherit ediff-fine-diff-A))
  (ediff-fine-diff-C (:inherit ediff-fine-diff-A))
  (ediff-odd-diff-A (:background ,grey-3))
  (ediff-odd-diff-Ancestor (:inherit ediff-odd-diff-A))
  (ediff-odd-diff-B (:inherit ediff-odd-diff-A))
  (ediff-odd-diff-C (:inherit ediff-odd-diff-A))
#+END_SRC
** Evil
#+BEGIN_SRC emacs-lisp
  (evil-ex-commands (:background ,unknown))
  (evil-ex-info (:foreground ,white-4))
  (evil-ex-lazy-highlight (:inherit evil-ex-search))
  (evil-ex-search (:foreground ,green-3 :background ,grey-3 :weight bold))
  (evil-ex-substitute-matches (:inherit evil-ex-search))
  (evil-ex-substitute-replacement (:foreground ,blue-2 :background ,grey-2))
  (evil-search-highlight-persist-highlight-face (:inherit evil-ex-search))
#+END_SRC
** Flycheck
#+BEGIN_SRC emacs-lisp
  (flycheck-error (:underline ,red-2))
  (flycheck-error-list-checker-name (:foreground ,white-4))
  (flycheck-error-list-column-number (:foreground ,white-4))
  (flycheck-error-list-error (:inherit flycheck-error))
  (flycheck-error-list-highlight (:inherit highlight))
  (flycheck-error-list-id (:foreground ,blue-2))
  (flycheck-error-list-id-with-explainer
   (:box (:line-width 1 :style released-button)))
  (flycheck-error-list-info (:inherit flycheck-info))
  (flycheck-error-list-line-number (:foreground ,white-2))
  (flycheck-error-list-warning (:inherit flycheck-warning))
  (flycheck-fringe-error (:foreground ,red-2))
  (flycheck-fringe-info (:foreground ,green-2))
  (flycheck-fringe-warning (:foreground ,yellow-1))
  (flycheck-info (:underline ,green-2))
  (flycheck-warning (:underline ,yellow-1))
  (flyspell-duplicate (:underline (:color ,yellow-1 :style wave)))
  (flyspell-incorrect (:underline (:color ,red-2 :style wave)))
#+END_SRC
** Helm
#+BEGIN_SRC emacs-lisp
  (helm-M-x-key
   (:foreground ,white-1 :background ,grey-3
				:box (:line-width 1 :style released-button)))
  (helm-action (:foreground ,blue-1))
  ;; helm-bookmark-addressbook is used in helm-swoop edit buffers
  (helm-bookmark-addressbook (:inherit font-lock-comment-face))
  (helm-bookmark-directory (:inherit helm-ff-directory))
  (helm-bookmark-file (:inherit helm-ff-file))
  (helm-bookmark-gnus (:background ,unknown))
  (helm-bookmark-info (:background ,unknown))
  (helm-bookmark-man (:background ,unknown))
  (helm-bookmark-w3m (:background ,unknown))
  (helm-buffer-directory (:inherit helm-ff-directory))
  (helm-buffer-file (:inherit helm-ff-file))
  (helm-buffer-not-saved (:weight bold))
  (helm-buffer-process (:foreground ,blue-3))
  (helm-buffer-saved-out (:foreground ,yellow-1 :weight bold))
  (helm-buffer-size (:foreground ,white-3))
  (helm-candidate-number (:background ,unknown))
  (helm-etags-file (:background ,unknown))
  (helm-ff-directory (:foreground ,blue-1 :weight bold))
  (helm-ff-dirs (:background ,unknown))
  (helm-ff-dotted-directory (:inherit helm-ff-directory))
  (helm-ff-dotted-symlink-directory (:inherit helm-ff-directory))
  (helm-ff-executable (:foreground ,green-1 :weight bold))
  (helm-ff-file (:foreground ,white-1))
  (helm-ff-invalid-symlink (:inherit font-lock-warning-face))
  (helm-ff-prefix (:foreground ,white-1 :weight bold))
  (helm-ff-symlink (:foreground ,green-2 :weight bold))
  (helm-grep-cmd-line (:foreground ,yellow-1))
  (helm-grep-file (:foreground ,blue-1))
  (helm-grep-finish (:slant italic))
  (helm-grep-lineno (:foreground ,green-1))
  (helm-grep-match (:inherit helm-match))
  (helm-header (:background ,unknown))
  (helm-header-line-left-margin (:foreground ,yellow-1 :weight bold))
  (helm-helper (:background ,unknown))
  (helm-history-deleted (:background ,unknown))
  (helm-history-remote (:background ,unknown))
  (helm-lisp-completion-info (:background ,unknown))
  (helm-lisp-show-completion (:background ,unknown))
  (helm-locate-finish (:background ,unknown))
  (helm-match (:foreground ,green-3 :weight bold))
  (helm-match-item (:inherit helm-match))
  (helm-moccur-buffer (:inherit helm-grep-file))
  (helm-prefarg (:background ,unknown))
  (helm-resume-need-update (:background ,unknown))
  (helm-selection (:inherit highlight))
  (helm-selection-line (:inherit highlight))
  (helm-separator (:foreground ,blue-1))
  (helm-source-header (:foreground ,blue-3 :weight bold :height 1.15))
  (helm-swoop-line-number-face (:background ,unknown))
  (helm-swoop-target-line-block-face (:background ,unknown))
  (helm-swoop-target-line-face (:inherit highlight))
  (helm-swoop-target-word-face (:inherit isearch))
  (helm-visible-mark (:foreground ,orange-2 :weight bold))
#+END_SRC
** Isearch
#+BEGIN_SRC emacs-lisp
  (isearch (:foreground ,green-3 :background ,grey-3 :weight bold))
  (isearch-fail (:foreground ,orange-2 :background ,grey-2))
#+END_SRC
** Magit
#+BEGIN_SRC emacs-lisp
  (magit-bisect-bad (:foreground ,red-2 :weight bold))
  (magit-bisect-good (:foreground ,green-2 :weight bold))
  (magit-bisect-skip (:foreground ,white-1 :weight bold))
  (magit-blame-date (:foreground ,blue-2 :background ,grey-3))
  (magit-blame-hash (:background ,unknown))
  (magit-blame-heading (:background ,grey-3))
  (magit-blame-name
   (:foreground ,white-2 :background ,grey-3 :weight normal))
  (magit-blame-summary
   (:foreground ,white-1 :background ,grey-3 :slant italic))
  (magit-branch-current
   (:foreground ,blue-2 :weight bold :box (:line-width 1)))
  (magit-branch-local (:foreground ,green-2 :weight bold))
  (magit-branch-remote (:foreground ,cyan-1 :weight bold))
  (magit-cherry-equivalent (:background ,unknown))
  (magit-cherry-unmatched (:background ,unknown))
  (magit-diff-added (:background ,diff-1))
  (magit-diff-added-highlight (:foreground ,white-1 :background ,diff-2))
  (magit-diff-base (:background ,unknown))
  (magit-diff-base-highlight (:background ,unknown))
  (magit-diff-conflict-heading (:inherit magit-diff-hunk-heading))
  (magit-diff-context (:background ,grey-1))
  (magit-diff-context-highlight (:background ,grey-1))
  (magit-diff-file-heading (:foreground ,blue-2))
  (magit-diff-file-heading-highlight (:inherit highlight))
  (magit-diff-file-heading-selection (:background ,unknown))
  (magit-diff-hunk-heading
   (:foreground ,white-3 :background ,grey-3 :slant italic))
  (magit-diff-hunk-heading-highlight
   (:foreground ,white-1 :background ,grey-4 :slant normal))
  (magit-diff-hunk-heading-selection (:background ,unknown))
  (magit-diff-lines-boundary (:background ,white-4))
  (magit-diff-lines-heading (:foreground ,grey-1 :background ,blue-1))
  (magit-diff-our (:background ,diff-3))
  (magit-diff-our-highlight (:background ,diff-4))
  (magit-diff-removed (:background ,diff-3))
  (magit-diff-removed-highlight (:foreground ,white-1 :background ,diff-4))
  (magit-diff-their (:background ,diff-1))
  (magit-diff-their-highlight (:background ,diff-2))
  (magit-diff-whitespace-warning (:background ,unknown))
  (magit-diffstat-added (:foreground ,green-2))
  (magit-diffstat-removed (:foreground ,red-1))
  (magit-dimmed (:foreground ,white-1))
  (magit-filename (:inherit default))
  (magit-hash (:foreground ,white-4))
  (magit-head (:foreground ,blue-2 :weight bold))
  (magit-header-line (:foreground ,yellow-3 :weight bold))
  (magit-log-author (:foreground ,blue-3))
  (magit-log-date (:foreground ,green-1))
  (magit-log-graph (:inherit default))
  (magit-popup-argument (:foreground ,white-1 :weight bold))
  (magit-popup-disabled-argument (:foreground ,white-1))
  (magit-popup-heading (:foreground ,yellow-3 :weight bold))
  (magit-popup-key (:foreground ,blue-2))
  (magit-popup-option-value (:weight bold))
  (magit-process-ng (:foreground ,red-1 :weight bold))
  (magit-process-ok (:inherit default))
  (magit-reflog-amend (:foreground ,yellow-3))
  (magit-reflog-checkout (:foreground ,green-1))
  (magit-reflog-cherry-pick (:background ,unknown))
  (magit-reflog-commit (:foreground ,white-3))
  (magit-reflog-merge (:foreground ,green-1))
  (magit-reflog-other (:background ,unknown))
  (magit-reflog-rebase (:foreground ,yellow-3))
  (magit-reflog-remote (:foreground ,blue-2 :weight bold))
  (magit-reflog-reset (:foreground ,blue-2))
  (magit-refname (:background ,unknown))
  (magit-refname-stash (:background ,unknown))
  (magit-refname-wip (:background ,unknown))
  (magit-section-heading (:foreground ,yellow-3 :weight bold))
  (magit-section-heading-selection (:background ,unknown))
  (magit-section-highlight (:inherit highlight))
  (magit-section-secondary-heading (:foreground ,yellow-3))
  (magit-sequence-done (:inherit magit-sequence-head))
  (magit-sequence-drop (:background ,unknown))
  (magit-sequence-head (:foreground ,white-1))
  (magit-sequence-onto (:foreground ,white-1 :weight bold))
  (magit-sequence-part (:foreground ,yellow-1))
  (magit-sequence-pick (:foreground ,green-1))
  (magit-sequence-stop (:background ,unknown))
  (magit-signature-bad (:background ,unknown))
  (magit-signature-good (:background ,unknown))
  (magit-signature-untrusted (:background ,unknown))
  (magit-tag (:foreground ,yellow-3 :weight bold :box t))
#+END_SRC
** Modeline
#+BEGIN_SRC emacs-lisp
  (mode-line
   (:background ,grey-3
				:box (:line-width -1 :color nil :style released-button)))
  (mode-line-buffer-id (:foreground ,white-1 :weight bold))
  (mode-line-emphasis (:background ,unknown))
  (mode-line-highlight (:foreground ,grey-1 :background ,yellow-1))
  (mode-line-inactive
   (:background ,grey-1 :foreground ,white-3 :inherit (mode-line)))
#+END_SRC
** Org
#+BEGIN_SRC emacs-lisp
  (org-agenda-calendar-event (:inherit normal))
  (org-agenda-calendar-sexp (:foreground ,green-1 :weight bold))
  (org-agenda-clocking (:background ,unknown))
  (org-agenda-column-dateline (:background ,unknown))
  (org-agenda-current-time (:foreground ,white-1 :weight bold))
  (org-agenda-date (:foreground ,blue-3))
  (org-agenda-date-today (:foreground ,white-1 :weight bold))
  (org-agenda-date-weekend (:foreground ,white-3 :slant italic))
  (org-agenda-diary (:background ,unknown))
  (org-agenda-dimmed-todo-face (:foreground ,white-4))
  (org-agenda-done (:foreground ,white-3 :slant italic))
  (org-agenda-filter-category (:background ,unknown))
  (org-agenda-filter-regexp (:background ,unknown))
  (org-agenda-filter-tags (:background ,unknown))
  (org-agenda-restriction-lock (:background ,unknown))
  (org-agenda-structure (:foreground ,yellow-3 :weight bold))
  (org-archived (:background ,unknown))
  (org-block (:background ,grey-0))
  (org-block-begin-line (:foreground ,cyan-1 :slant italic))
  (org-block-end-line (:inherit org-block-begin-line))
  (org-checkbox (:foreground ,white-1 :weight bold))
  (org-checkbox-statistics-done (:foreground ,white-1 :slant italic))
  (org-checkbox-statistics-todo (:foreground ,yellow-3 :weight bold))
  (org-clock-overlay (:background ,unknown))
  (org-code (:foreground ,white-1 :background ,grey-3))
  (org-column (:foreground ,white-1 :weight bold :background ,grey-2))
  (org-column-title (:foreground ,yellow-3 :background ,grey-3 :weight bold))
  (org-date (:foreground ,cyan-1))
  (org-date-selected (:foreground ,grey-1 :background ,cyan-1))
  (org-default (:background ,unknown))
  (org-document-info (:inherit normal))
  (org-document-info-keyword (:foreground ,blue-4 :slant italic))
  (org-document-title (:foreground ,white-1 :weight bold :height 1.2))
  (org-done (:foreground ,green-1 :weight bold :strike-through t))
  (org-drawer (:background ,unknown))
  (org-ellipsis (:inherit normal))
  (org-footnote (:background ,unknown))
  (org-formula (:background ,unknown))
  (org-headline-done (:background ,unknown))
  (org-hide (:foreground ,grey-1 :foreground ,grey-1))
  (org-indent (:inherit org-hide))
  (org-kbd (:foreground ,yellow-1))
  (org-latex-and-related (:background ,unknown))
  (org-level-1 (:foreground ,yellow-3))
  (org-level-2 (:foreground ,blue-2))
  (org-level-3 (:foreground ,green-1))
  (org-level-4 (:foreground ,cyan-1))
  (org-level-5 (:inherit org-level-1))
  (org-level-6 (:inherit org-level-2))
  (org-level-7 (:inherit org-level-3))
  (org-level-8 (:inherit org-level-4))
  (org-link (:weight bold :underline t))
  (org-list-dt (:background ,unknown))
  (org-macro (:background ,unknown))
  (org-meta-line (:foreground ,blue-4))
  (org-mode-line-clock (:background ,unknown))
  (org-mode-line-clock-overrun (:background ,unknown))
  (org-priority (:foreground ,cyan-1 :weight bold))
  (org-property-value (:weight bold))
  (org-quote (:background ,unknown))
  (org-scheduled (:foreground ,white-1))
  (org-scheduled-previously (:foreground ,orange-1))
  (org-scheduled-today (:foreground ,yellow-3))
  (org-sexp-date (:background ,unknown))
  (org-special-keyword (:foreground ,blue-4 :slant italic))
  (org-table (:foreground ,cyan-1))
  (org-tag (:foreground ,white-2 :weight bold))
  (org-tag-group (:background ,unknown))
  (org-target (:background ,unknown))
  (org-time-grid (:foreground ,white-2 :slant italic))
  (org-todo (:foreground ,yellow-3 :weight bold))
  (org-upcoming-deadline (:foreground ,white-1))
  (org-verbatim (:inherit org-code))
  (org-verse (:background ,unknown))
  (org-warning (:foreground ,red-2))
#+END_SRC
** Paren
#+BEGIN_SRC emacs-lisp
  (paren-face-match (:background ,red-1))
  (paren-face-mismatch (:background ,yellow-1))
  (paren-face-no-match (:background ,blue-1))
#+END_SRC
** Rainbow Delimiters
#+BEGIN_SRC emacs-lisp
  (rainbow-delimiters-depth-1-face (:foreground ,white-1))
  (rainbow-delimiters-depth-10-face (:foreground ,white-2))
  (rainbow-delimiters-depth-11-face (:foreground ,white-1))
  (rainbow-delimiters-depth-12-face (:foreground ,white-2))
  (rainbow-delimiters-depth-2-face (:foreground ,white-2))
  (rainbow-delimiters-depth-3-face (:foreground ,white-1))
  (rainbow-delimiters-depth-4-face (:foreground ,white-2))
  (rainbow-delimiters-depth-5-face (:foreground ,white-1))
  (rainbow-delimiters-depth-6-face (:foreground ,white-2))
  (rainbow-delimiters-depth-7-face (:foreground ,white-1))
  (rainbow-delimiters-depth-8-face (:foreground ,white-2))
  (rainbow-delimiters-depth-9-face (:foreground ,white-1))
#+END_SRC
** Show Paren
#+BEGIN_SRC emacs-lisp
  (show-paren-match (:inverse-video t :weight normal))
  (show-paren-mismatch (:foreground ,red-1 :background ,grey-3))
#+END_SRC
** Spacemacs
#+BEGIN_SRC emacs-lisp
  (spacemacs-emacs-face (:background ,blue-3))
  (spacemacs-evilified-face (:background ,blue-1))
  (spacemacs-helm-navigation-ms-face (:background ,unknown))
  (spacemacs-hybrid-face (:background ,unknown))
  (spacemacs-ido-navigation-ms-face (:background ,unknown))
  (spacemacs-iedit-face (:background ,unknown))
  (spacemacs-iedit-insert-face (:background ,unknown))
  (spacemacs-insert-face
   (:foreground ,grey-1 :background ,green-2 :weight bold))
  (spacemacs-lisp-face (:background ,unknown))
  ;; spacemacs-micro-state-binding-face is being overwritten somewhere
  (spacemacs-micro-state-binding-face (:foreground ,cyan-1))
  (spacemacs-micro-state-header-face (:background ,unknown))
  (spacemacs-mode-line-new-version-lighter-error-face (:background ,red-1))
  (spacemacs-mode-line-new-version-lighter-success-face
   (:background ,yellow-1
	:box (:line-width -1 :color "#0000ff" :style released-button)))
  (spacemacs-mode-line-new-version-lighter-warning-face
   (:background ,orange-1))
  (spacemacs-motion-face
   (:foreground ,grey-1 :background ,blue-2 :weight bold))
  (spacemacs-normal-face
   (:foreground ,grey-1 :background ,white-2 :weight bold))
  (spacemacs-replace-face
   (:foreground ,white-2 :background ,red-1 :weight bold))
  (spacemacs-visual-face
   (:foreground ,grey-1 :background ,blue-1 :weight bold))
#+END_SRC
** Undo Tree
#+BEGIN_SRC emacs-lisp
  (undo-tree-visualizer-active-branch-face
   (:foreground ,white-1 :weight bold))
  (undo-tree-visualizer-current-face (:foreground ,cyan-1 :weight bold))
  (undo-tree-visualizer-default-face (:foreground ,white-3 :slant italic))
  (undo-tree-visualizer-register-face (:foreground ,unknown))
  (undo-tree-visualizer-unmodified-face (:foreground ,green-2))
#+END_SRC
** Whitespace
#+BEGIN_SRC emacs-lisp
  (whitespace-empty (:foreground ,unknown))
  (whitespace-hspace (:foreground ,unknown))
  (whitespace-indentation (:inherit whitespace-space :weight bold))
  (whitespace-line (:foreground ,white-1 :background ,grey-3))
  (whitespace-newline (:inherit whitespace-space))
  (whitespace-space (:foreground ,white-4))
  (whitespace-space-after-tab (:inherit whitespace-trailing))
  (whitespace-space-before-tab (:inherit whitespace-trailing))
  (whitespace-tab (:inherit whitespace-space))
  (whitespace-trailing (:foreground ,grey-2 :background ,yellow-3))
#+END_SRC
* Epilogue
#+BEGIN_SRC emacs-lisp
  ;; Started in Prologue
  )))

  (let ((faces (mapcar (lambda (config)
						 `(,(nth 0 config) ((t ,(nth 1 config)))))
                       themian-faces-list)))
	(apply #'custom-theme-set-faces
           'themian
           faces))


  ;;;###autoload
  (when load-file-name
	(add-to-list 'custom-theme-load-path
				 (file-name-as-directory (file-name-directory load-file-name))))

  (provide-theme 'themian)
#+END_SRC
